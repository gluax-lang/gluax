import "entity";

use entity::Entity;

#[global]
pub class Player: Entity {}

#[global = "Player"]
func get_player(i: number) -> Player;

impl Player {
    pub func get(i: number) -> ?Self {
        let player = get_player(i);
        if player == entity::NULL {
            return nil;
        }
        return player;
    }

    #[global = "player.GetAll"]
    pub func all() -> vec<Self>;
}

impl Player {
    #[global = "player.Iterator"]
    pub func iter() -> (func(Self, any) -> (?number, ?Self), vec<Self>, number);
}

impl Player {
    #[rename_to = "AccountID"]
    pub func account_id(self) -> number;

    #[rename_to = "AddCleanup"]
    pub func add_cleanup(self, name: string, ent: Entity);

    #[rename_to = "AddCount"]
    pub func add_count(self, name: string, ent: Entity);

    #[rename_to = "AddDeaths"]
    pub func add_deaths(self, num: number);

    #[rename_to = "AddFrags"]
    pub func add_frags(self, num: number);

    #[rename_to = "GetName"]
    pub func name(self) -> string;

    #[rename_to = "SteamID"]
    pub func steam_id(self) -> string;

    #[rename_to = "SteamID64"]
    pub func steam_id64(self) -> string;

    #[rename_to = "UserID"]
    pub func user_id(self) -> number;

    #[rename_to = "Team"]
    pub func team(self) -> number;
}
