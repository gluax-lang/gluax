import "color";

#[global]
#[named_fields]
#[sealed]
pub class Vector {
    pub x: number,
    pub y: number,
    pub z: number
}

impl Vector {
    #[global = "Vector"]
    pub func new(x: ?number, y: ?number, z: ?number) -> Self;
}

impl Vector {
    #[rename_to = "Add"]
    pub func add(self, other: Self);

    #[rename_to = "Sub"]
    pub func sub(self, other: Self);

    #[rename_to = "Mul"]
    pub func mul(self, other: Self);

    #[rename_to = "Div"]
    pub func div(self, other: Self);

    #[rename_to = "Cross"]
    pub func cross(self, other: Self) -> Self;

    #[rename_to = "Distance"]
    pub func distance(self, other: Self) -> number;

    #[rename_to = "Distance2D"]
    pub func distance_2d(self, other: Self) -> number;

    #[rename_to = "Distance2DSqr"]
    pub func distance_2d_sqr(self, other: Self) -> number;

    #[rename_to = "DistToSqr"]
    pub func dist_to_sqr(self, other: Self) -> number;

    #[rename_to = "Dot"]
    pub func dot(self, other: Self) -> number;

    #[rename_to = "Negate"]
    pub func negate(self);

    #[rename_to = "GetNegated"]
    pub func negated(self) -> Self;

    #[rename_to = "GetNormalized"]
    pub func normalized(self) -> Self;

    #[rename_to = "IsEqualTol"]
    pub func is_equal_tol(self, other: Self, tolerance: number) -> bool;

    #[rename_to = "IsZero"]
    pub func is_zero(self) -> bool;

    #[rename_to = "Length"]
    pub func length(self) -> number;

    #[rename_to = "Length2D"]
    pub func length_2d(self) -> number;

    #[rename_to = "Length2DSqr"]
    pub func length_2d_sqr(self) -> number;

    #[rename_to = "LengthSqr"]
    pub func length_sqr(self) -> number;

    #[rename_to = "Normalize"]
    pub func normalize(self);

    #[rename_to = "Random"]
    pub func random(self, min: ?number, max: ?number);

    #[rename_to = "Set"]
    pub func set(self, other: Self);

    #[rename_to = "SetUnpacked"]
    pub func set_unpacked(self, x: number, y: number, z: number);

    #[rename_to = "ToColor"]
    pub func to_color(self) -> color::Color;

    #[rename_to = "ToScreen"]
    pub func to_screen(self) -> VectorToScreen;

    #[rename_to = "ToTable"]
    pub func to_table(self) -> vec<number>;

    #[rename_to = "Unpack"]
    pub func unpack(self) -> (number, number, number);

    #[rename_to = "WithinAABox"]
    pub func within_aabox(self, min: Self, max: Self) -> bool;

    #[rename_to = "Zero"]
    pub func zero(self);
}

#[global]
#[named_fields]
#[sealed]
class VectorToScreen {
    pub x: number,
    pub y: number,
    pub visible: bool
}
