#[global]
pub class Entity {}

#[global]
pub let NULL: Entity = get_entity(0);

#[global = "Entity"]
func get_entity(i: number) -> Entity {}

impl Entity {
    pub func get(i: number) -> ?Self {
        let ent = get_entity(i);
        if ent == NULL {
            return nil;
        }
        return ent;
    }

    #[global = "ents.GetAll"]
    pub func all() -> vec<Entity> {}
}

impl Entity {
    #[global = "ents.Iterator"]
    pub func iter() -> (func(Entity, any) -> (?number, ?Entity), vec<Entity>, number) {}
}

impl Entity {
    #[rename_method = "Activate"]
    pub func activate(self) {}

    #[rename_method = "EntIndex"]
    pub func index(self) -> number {}

    #[rename_method = "IsValid"]
    pub func is_valid(self) -> bool {}

    #[rename_method = "Health"]
    pub func health(self) -> number {}

    #[rename_method = "SetHealth"]
    pub func set_health(self, health: number) {}

    #[rename_method = "GetMaxHealth"]
    pub func max_health(self) -> number {}

    #[rename_method = "GetClass"]
    pub func get_class(self) -> string {}

    #[rename_method = "IsPlayer"]
    pub func is_player(self) -> bool {}

    #[rename_method = "Alive"]
    pub func is_alive(self) -> bool {}
}
