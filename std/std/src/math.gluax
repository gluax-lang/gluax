import "debug";

/* Globals */

/* Constants */

#[global = "math.huge"]
pub let HUGE: number = 0;

#[global = "math.pi"]
pub let PI: number = 0;

/* Functions */

#[global = "math.abs"]
pub func abs(n: number) -> number;

#[global = "math.acos"]
pub func acos(n: number) -> number;

#[global = "math.asin"]
pub func asin(n: number) -> number;

#[global = "math.atan"]
pub func atan(n: number) -> number;

#[global = "math.atan2"]
pub func atan2(y: number, x: number) -> number;

#[global = "math.ceil"]
pub func ceil(n: number) -> number;

#[global = "math.cos"]
pub func cos(n: number) -> number;

#[global = "math.cosh"]
pub func cosh(n: number) -> number;

#[global = "math.deg"]
pub func deg(n: number) -> number;

#[global = "math.exp"]
pub func exp(n: number) -> number;

#[global = "math.floor"]
pub func floor(n: number) -> number;

#[global = "math.fmod"]
pub func fmod(x: number, y: number) -> number;

#[global = "math.frexp"]
pub func frexp(n: number) -> (number, number);

#[global = "math.ldexp"]
pub func ldexp(m: number, e: number) -> number;

#[global = "math.log"]
pub func log(n: number, base: ?number) -> number;

#[global = "math.log10"]
pub func log10(n: number) -> number;

#[global = "math.max"]
pub func max(n: number, o: number, ...number) -> number;

#[global = "math.min"]
pub func min(n: number, o: number, ...number) -> number;

#[global = "math.modf"]
pub func modf(n: number) -> (number, number);

#[global = "math.pow"]
pub func pow(b: number, e: number) -> number;

#[global = "math.rad"]
pub func rad(n: number) -> number;

#[global = "math.random"]
pub func random() -> number;

#[global = "math.randomseed"]
pub func randomseed(seed: number);

#[global = "math.sin"]
pub func sin(n: number) -> number;

#[global = "math.sinh"]
pub func sinh(n: number) -> number;

#[global = "math.sqrt"]
pub func sqrt(n: number) -> number;

#[global = "math.tan"]
pub func tan(n: number) -> number;

#[global = "math.tanh"]
pub func tanh(n: number) -> number;

/* End Globals */

#[inline]
pub func clamp(n: number, mi: number, ma: number) -> number {
    debug::assert(mi <= ma, "math.clamp: min (%s) must be less than or equal to max (%s)", mi, ma);
    if n < mi {
        mi
    } else if n > ma {
        ma
    } else {
        n
    }
}
