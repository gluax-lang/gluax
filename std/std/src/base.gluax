/* Globals */

#[global]
pub let _VERSION: string = "";

#[global]
pub func print(...any) {}

#[global]
pub func error(m: string) -> unreachable {}

#[global = "error"]
pub func error_level(m: string, level: number) -> unreachable {}

#[global]
pub func rawequal(v1: any, v2: any) -> bool {}
#[global]
pub func rawget(t: table, k: any) -> any {}
#[global]
pub func rawset(t: table, k: any, v: any) {}

#[global]
pub func getmetatable(t: any) -> any {}
#[global]
pub func setmetatable(t: any, m: any) {}

#[global]
pub func tonumber(v: any) -> ?number {}

#[global = "tonumber"]
pub func tonumber_base(v: any, base: ?number) -> ?number {}

#[global]
pub func getfenv(v: any) -> map<any, any> {}

#[global]
pub func pcall(f: anyfunc, ...any) -> (bool, ...any) {}

#[global]
pub func tostring(v: any) -> string {}

#[global]
pub func next(t: table, prev_k: any) -> (any, any) {}

#[global]
pub func select(p: any, ...any) -> ...any {}

#[global]
pub func type(v: any) -> string {}

#[global = "unpack"]
pub func unpack(tbl: table) -> ...any {}

#[global = "unpack"]
pub func unpack_from(tbl: table, s: number) -> ...any {}

#[global = "unpack"]
pub func unpack_range(tbl: table, s: number, e: number) -> ...any {}

/* End Globals */

pub func getfenv_f(f: anyfunc) -> map<any, any> {
    getfenv(f)
}

pub func getfenv_l(level: number) ! -> map<any, any> {
    let success, res = pcall(getfenv, level);
    if !success {
        throw (res unsafe_cast_as string);
    }
    res unsafe_cast_as map<any, any>
}

pub func printf(fmt: string, ...any) {
    print(string::format(fmt, ...))
}

pub func errorf(msg: string, ...any) -> unreachable {
    error(string::format(msg, ...))
}

pub func select_n(...any) -> number {
    select("#", ...) unsafe_cast_as number
}

