import "../math";
import "../debug";
import "../base";

impl number {
    /* Globals */

    #[global = "tostring"]
    pub func to_string(self) -> string {}

    #[global = "math.abs"]
    pub func abs(self) -> number {}

    #[global = "math.acos"]
    pub func acos(self) -> number {}

    #[global = "math.asin"]
    pub func asin(self) -> number {}

    #[global = "math.atan"]
    pub func atan(self) -> number {}

    #[global = "math.ceil"]
    pub func ceil(self) -> number {}

    #[global = "math.cos"]
    pub func cos(self) -> number {}

    #[global = "math.cosh"]
    pub func cosh(self) -> number {}

    #[global = "math.deg"]
    pub func deg(self) -> number {}

    #[global = "math.exp"]
    pub func exp(self) -> number {}

    #[global = "math.floor"]
    pub func floor(self) -> number {}

    #[global = "math.frexp"]
    pub func frexp(self) -> (number, number) {}

    #[global = "math.log"]
    pub func log(self, b: ?number) -> number {}

    #[global = "math.log10"]
    pub func log10(self) -> number {}

    #[global = "math.max"]
    pub func max(self, mi: number, ma: number, ...number) -> number {}

    #[global = "math.min"]
    pub func min(self, mi: number, ma: number, ...number) -> number {}

    #[global = "math.modf"]
    pub func modf(self) -> (number, number) {}

    #[global = "math.pow"]
    pub func pow(self, e: number) -> number {}

    #[global = "math.rad"]
    pub func rad(self) -> number {}

    #[global = "math.sin"]
    pub func sin(self) -> number {}

    #[global = "math.sinh"]
    pub func sinh(self) -> number {}

    #[global = "math.sqrt"]
    pub func sqrt(self) -> number {}

    #[global = "math.tan"]
    pub func tan(self) -> number {}

    #[global = "math.tanh"]
    pub func tanh(self) -> number {}

    /* End Globals */

    #[inline]
    pub func to_char(self) -> string {
        debug::assert(self >= 0 && self <= 255, "number.to_char: value must be in range [0, 255], got %s", self);
        string::char(self)
    }

    #[inline]
    pub func is_nan(self) -> bool { self != self }

    #[inline]
    pub func is_inf(self) -> bool { self == math::HUGE || self == -math::HUGE }

    #[inline]
    pub func is_double(self) -> bool {
        // a number like 1.7976931348623e308 will fail with % 1 ~= 0
        // but if you subtract 1 from it, it will still equal itself
        self % 1 != 0 || self - 1 == self
    }

    #[inline]
    pub func is_int(self) -> bool { !self.is_double() }

    #[inline]
    pub func clamp(self, mi: number, ma: number) -> number { math::clamp(self, mi, ma) }
}
