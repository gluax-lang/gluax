import "../math";
import "../debug";

impl number {
    #[inline]
    func to_string(self) -> string {
        globals::base::tostring(self)
    }

    #[inline]
    func to_char(self) -> string {
        debug::assert(self >= 0 && self <= 255, "number.to_char: value must be in range [0, 255], got %s", self);
        globals::str::char(self)
    }

    #[inline]
    func is_nan(self) -> bool { self != self }

    #[inline]
    func is_inf(self) -> bool { self == math::HUGE || self == -math::HUGE }

    #[inline]
    func is_int(self) -> bool { self == self.floor() }

    #[inline]
    func clamp(self, mi: number, ma: number) -> number { math::clamp(self, mi, ma) }

    #[inline]
    func abs(self) -> number { math::abs(self) }

    #[inline]
    func acos(self) -> number { math::acos(self) }

    #[inline]
    func asin(self) -> number { math::asin(self) }

    #[inline]
    func atan(self) -> number { math::atan(self) }

    #[inline]
    func ceil(self) -> number { math::ceil(self) }

    #[inline]
    func cos(self) -> number { math::cos(self) }

    #[inline]
    func cosh(self) -> number { math::cosh(self) }

    #[inline]
    func deg(self) -> number { math::deg(self) }

    #[inline]
    func exp(self) -> number { math::exp(self) }

    #[inline]
    func floor(self) -> number { math::floor(self) }

    #[inline]
    func frexp(self) -> (number, number) { math::frexp(self) }

    #[inline]
    func log(self, base: ?number) -> number { math::log(self, base) }

    #[inline]
    func log10(self) -> number { math::log10(self) }

    func max(self, mi: number, ma: number, ...number) -> number { math::max(self, mi, ma, ...) }

    func min(self, mi: number, ma: number, ...number) -> number { math::min(self, mi, ma, ...) }
}
