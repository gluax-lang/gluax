import "../base";

impl<K, V> map<K, V> {
    #[inline]
    func __x_iter_pairs(self) -> (func(table, any) -> (?K, ?V), Self) {
        (base::next unsafe_cast_as func(table, any) -> (?K, ?V), self)
    }
}


impl<K, V> map<K, V> {
    #[inline]
    pub func get(self, key: K) -> ?V {
        @raw("{@RETURN {@1@}[{@2@}] @}", self, key) -> ?V
    }

    #[inline]
    pub func set(self, key: K, value: V) {
        @raw("{@1@}[{@2@}] = {@3@}", self, key, value);
    }

    #[inline]
    pub func remove(self, key: K) {
        @raw("{@1@}[{@2@}] = nil;", self, key);
    }

    #[inline]
    pub func take(self, key: K) -> ?V {
        @raw("do local self, key = {@1@}, {@2@}; {@TEMP1@}, self[key] = self[key], nil; {@RETURN {@TEMP1@} @} end;", self, key) -> ?V
    }

    // Same as `set`, but returns the previous value if it exists
    #[inline]
    pub func insert(self, key: K, value: V) -> ?V {
        @raw("do local self, key = {@1@}, {@2@}; {@TEMP1@}, self[key] = self[key], {@3@}; {@RETURN {@TEMP1@} @} end;", self, key, value) -> ?V
    }
}
