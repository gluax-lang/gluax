impl<K, V> map<K, V> {
    #[inline]
    func new() -> Self {
        @raw("{@RETURN {} @}") -> Self
    }

    #[inline]
    func get(self, key: K) -> ?V {
        @raw("{@RETURN {@1@}[{@2@}] @}", self, key) -> ?V
    }

    #[inline]
    func set(self, key: K, value: V) {
        @raw("{@1@}[{@2@}] = {@3@}", self, key, value);
    }

    #[inline]
    func remove(self, key: K) {
        @raw("{@1@}[{@2@}] = nil;", self, key);
    }

    #[inline]
    func take(self, key: K) -> ?V {
        @raw("do {@TEMP1@}, {@1@}[{@2@}] = {@1@}[{@2@}], nil; {@RETURN {@TEMP1@} @} end;", self, key) -> ?V
    }

    // Same as `set`, but returns the previous value if it exists
    #[inline]
    func insert(self, key: K, value: V) -> ?V {
        @raw("do {@TEMP1@}, {@1@}[{@2@}] = {@1@}[{@2@}], {@3@}; {@RETURN {@TEMP1@} @} end;", self, key, value) -> ?V
    }
}
