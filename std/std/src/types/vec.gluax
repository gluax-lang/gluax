impl<T> vec<T> {
    #[inline]
    func new() -> Self {
        @raw("{@RETURN {} @}") -> Self
    }

    #[inline]
    func len(self) -> number { #self }

    #[inline]
    func push(self, v: T) {
        @raw("do local self = {@1@}; self[#self+1] = {@2@} end;", self, v);
    }

    #[inline]
    func pop(self) -> ?T {
        @raw("do local self = {@1@}; local len = #self; if len == 0 then {@TEMP1@} = nil else {@TEMP1@}, self[len] = self[len], nil; end {@RETURN {@TEMP1@} @} end;", self) -> ?T
    }

    #[inline]
    func is_empty(self) -> bool { #self == 0 }

    #[inline]
    func remove(self, idx: number) -> ?T {
        @raw("{@RETURN table.remove({@1@}, {@2@}) @}", self, idx) -> ?T
    }

    #[inline]
    func get(self, idx: number) -> ?T {
        @raw("{@RETURN {@1@}[{@2@}] @}", self, idx) -> ?T
    }

    #[inline]
    func reverse(self) {
        @raw("do local self = {@1@}; local len = #self; for i = 1, math.floor(len / 2) do self[i], self[len - i + 1] = self[len - i + 1], self[i] end end;", self);
    }

    #[inline]
    func __x_iter_range_bound(self) -> number { #self }

    #[inline]
    func __x_iter_range(self, idx: number) -> T {
        @raw("{@RETURN {@1@}[{@2@}] @}", self, idx) -> T
    }
}
