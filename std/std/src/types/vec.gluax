import "../debug";
import "../base";

impl<T> vec<T> {
    #[inline]
    pub func len(self) -> number {
        @raw("{@RETURN #{@1@} @}", self) -> number
    }

    #[inline]
    pub func push(self, v: T) {
        @raw("do local self = {@1@}; self[#self+1] = {@2@} end;", self, v);
    }

    #[inline]
    pub func insert(self, idx: number, v: T) {
        let len = self.len();
        if idx < 1 || idx > len + 1 {
            base::errorf("vec.insert: index %s out of bounds [1, %s]", idx, len + 1);
        }
        @raw("table.insert({@1@}, {@2@}, {@3@});", self, idx, v);
    }

    #[inline]
    pub func set_unchecked(self, idx: number, v: T) {
        @raw("do {@1@}[{@2@}] = {@3@}; end;", self, idx, v);
    }

    #[inline]
    pub func pop(self) -> ?T {
        @raw("do local self = {@1@}; local len = #self; if len == 0 then {@TEMP1@} = nil else {@TEMP1@}, self[len] = self[len], nil; end {@RETURN {@TEMP1@} @} end;", self) -> ?T
    }

    #[inline]
    pub func is_empty(self) -> bool { self.len() == 0 }

    #[global = "table.remove"]
    pub func remove(self, idx: number) -> ?T {}

    #[inline]
    pub func get(self, idx: number) -> ?T {
        @raw("{@RETURN {@1@}[{@2@}] @}", self, idx) -> ?T
    }

    #[inline]
    pub func reverse(self) {
        @raw("do local self = {@1@}; local len = #self; for i = 1, math.floor(len / 2) do self[i], self[len - i + 1] = self[len - i + 1], self[i] end end;", self);
    }

    #[inline]
    pub func __x_iter_range_bound(self) -> number { self.len() }

    #[inline]
    pub func __x_iter_range(self, idx: number) -> T {
        @raw("{@RETURN {@1@}[{@2@}] @}", self, idx) -> T
    }

    #[global = "table.sort"]
    pub func sort(self, cmp: ?func(T, T) -> bool) -> Self {}

    #[global = "unpack"]
    pub func unpack(self, s: ?number, e: ?number) -> ...T {}
}

impl vec<string> {
    pub func join(self, sep: ?string, s: ?number, e: ?number) -> string {
        debug::assert(if s {
            s? >= 1
        } else {
            true
        }, "vec.join: start index must be greater than or equal to 1, got %s", s);
        debug::assert(if e {
            e? <= self.len()
        } else {
            true
        }, "vec.join: end index must be less than or equal to the length of the vector, got %s, length is %s", e, self.len());
        table::join(self, sep, s, e)
    }
}

impl vec<number> {
    pub func join(self, sep: ?string, s: ?number, e: ?number) -> string {
        debug::assert(if s {
            s? >= 1
        } else {
            true
        }, "vec.join: start index must be greater than or equal to 1, got %s", s);
        debug::assert(if e {
            e? <= self.len()
        } else {
            true
        }, "vec.join: end index must be less than or equal to the length of the vector, got %s, length is %s", e, self.len());
        table::join(self, sep, s, e)
    }
}
