import "../debug";

use globals::str;

impl string {
    func char(...number) -> string { str::char(...) }

    #[inline]
    func to_number(self) -> ?number {
        globals::base::tonumber(self)
    }

    #[inline]
    func len(self) -> number {
        @raw("{@RETURN #{@1@} @}", self) -> number
    }

    #[inline]
    func is_empty(self) -> bool { self == "" }

    #[inline]
    func sub(self, s_pos: number, e_pos: ?number) -> string {
        str::sub(self, s_pos, e_pos)
    }

    #[inline]
    func byte(self, s_pos: number) -> ?number {
        debug::assert(s_pos > 0, "string.byte: position must be greater than 0, got %s", s_pos);
        debug::assert(s_pos <= #self, "string.byte: position out of bounds, got %s, string length is %s", s_pos, #self);
        str::byte(self, s_pos)
    }

    func bytes(self, s_pos: number, e_pos: number) -> ...number {
        debug::assert(s_pos > 0, "string.bytes: start position must be greater than 0, got %s", s_pos);
        debug::assert(s_pos <= #self, "string.bytes: start position out of bounds, got %s, string length is %s", s_pos, #self);
        debug::assert(e_pos >= s_pos, "string.bytes: end position must be greater than or equal to start position, got %s and %s", e_pos, s_pos);
        debug::assert(e_pos <= #self, "string.bytes: end position out of bounds, got %s, string length is %s", e_pos, #self);
        return str::bytes(self, s_pos, e_pos);
    }

    #[inline]
    func starts_with(self, prefix: string) -> bool {
        self.sub(1, #prefix) == prefix
    }

    #[inline]
    func ends_with(self, suffix: string) -> bool {
        suffix == "" || self.sub(-#suffix, nil) == suffix
    }

    func format(self, ...any) -> string { str::format(self, ...) }

    #[inline]
    func rep(self, n: number, sep: ?string) -> string { str::rep(self, n, sep) }

    #[inline]
    func upper(self) -> string { str::upper(self) }

    #[inline]
    func lower(self) -> string { str::lower(self) }

    #[inline]
    func __x_iter_range_bound(self) -> number { #self }

    #[inline]
    func __x_iter_range(self, idx: number) -> string {
        str::sub(self, idx, idx)
    }
}
