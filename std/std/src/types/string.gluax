import "../debug";
import "../base";

#[global = "string.sub"]
func sub(s: string, s_p: number, e_p: ?number) -> string {}

#[global = "string.byte"]
func byte(s: string, p: number) -> ?number {}

#[global = "string.byte"]
func bytes(s: string, s_p: number, e_p: number) -> ...number {}

#[global = "string.find"]
func find(s: string, pattern: string, init: ?number, plain: ?bool) -> (?number, ?number, ...string) {}

impl string {
    #[inline]
    pub func __x_iter_range_bound(self) -> number { #self }

    #[inline]
    pub func __x_iter_range(self, idx: number) -> string {
        sub(self, idx, idx)
    }
}

impl string {
    #[global = "string.char"]
    pub func char(...number) -> string {}

    #[global = "string.sub"]
    pub func sub(self, s_p: number, e_p: ?number) -> string {}

    #[global = "string.format"]
    pub func format(self, ...any) -> string {}

    #[global = "string.rep"]
    pub func rep(self, n: number, sep: ?string) -> string {}

    #[global = "string.upper"]
    pub func upper(self) -> string {}

    #[global = "string.lower"]
    pub func lower(self) -> string {}

    #[global = "string.reverse"]
    pub func reverse(self) -> string {}

    #[global = "tonumber"]
    pub func to_number(self) -> ?number {}
}

impl string {
    #[inline]
    pub func is_empty(self) -> bool { self == "" }

#ifdef DEBUG
    pub func byte(self, s_pos: number) -> ?number {
        debug::assert(s_pos > 0, "string.byte: position must be greater than 0, got %s", s_pos);
        debug::assert(s_pos <= #self, "string.byte: position out of bounds, got %s, string length is %s", s_pos, #self);
        byte(self, s_pos)
    }

    pub func bytes(self, s_pos: number, e_pos: number) -> ...number {
        debug::assert(s_pos > 0, "string.bytes: start position must be greater than 0, got %s", s_pos);
        debug::assert(s_pos <= #self, "string.bytes: start position out of bounds, got %s, string length is %s", s_pos, #self);
        debug::assert(e_pos >= s_pos, "string.bytes: end position must be greater than or equal to start position, got %s and %s", e_pos, s_pos);
        debug::assert(e_pos <= #self, "string.bytes: end position out of bounds, got %s, string length is %s", e_pos, #self);
        return bytes(self, s_pos, e_pos);
    }
#else
    #[global = "string.byte"]
    pub func byte(self, s_pos: number) -> ?number {}

    #[global = "string.byte"]
    pub func bytes(self, s_pos: number, e_pos: number) -> ...number {}
#endif

    #[inline]
    pub func starts_with(self, prefix: string) -> bool {
        self.sub(1, #prefix) == prefix
    }

    #[inline]
    pub func ends_with(self, suffix: string) -> bool {
        suffix == "" || self.sub(-#suffix) == suffix
    }

    #[inline]
    pub func contains(self, s: string) -> bool {
        (find(self, s, nil, true) unsafe_cast_as nil != nil) unsafe_cast_as bool
    }
}
