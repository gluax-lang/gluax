import "globals*";

/* types */

pub struct nil {
    _priv: nil
}

pub struct any {
    _priv: nil
}

pub struct bool {
    _priv: nil,
}

pub struct number {
    _priv: nil,

    #[inline]
    func to_string(n: Self) -> string {
        globals::lua::tostring(n)
    }
}

pub struct string {
    _priv: nil,

    #[inline]
    func to_number(s: Self) -> ?number {
        globals::lua::tonumber(s)
    }

    #[inline]
    func len(s: Self) -> number {
        @raw("{@RETURN #{@1@} @}", s) -> number
    }
}

// vector
pub struct vec<T> {
    _priv: nil,

    #[inline]
    func new() -> Self {
        @raw("{@RETURN {} @}") -> Self
    }

    #[inline]
    func len(s: Self) -> number {
        @raw("{@RETURN #{@1@} @}", s) -> number
    }
}

// hashmap
pub struct map<K, V> {
    _priv: nil,

    #[inline]
    func new() -> Self {
        @raw("{@RETURN {} @}") -> Self
    }
}

// option/nullable
pub struct option<T> {
    _priv: nil,
}

// anyfunc fits any function signature
pub struct anyfunc {
    _priv: nil,
}

// table fits: table | any vec | any map
pub struct table {
    _priv: nil,
}
